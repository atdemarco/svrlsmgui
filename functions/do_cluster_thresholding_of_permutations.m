function variables = do_cluster_thresholding_of_permutations(handles,parameters,variables,all_perm_data,thresholded)
    if parameters.PermNumClusterwise > parameters.PermNumVoxelwise
        error('Cannot sample more cluster permutations than have been generated by the voxelwise permutation procedure.'); 
    end

    % Now for each permuted beta map, apply the beta mask and determine largest surviving cluster.
    message = 'Applying beta masks to null data and noting largest null clusters...';
    UpdateProgress(handles,message,1);
    svrlsm_waitbar(parameters.waitbar,0,message);
    
    % Reconstruct the volumes so we can threshold and examine cluster sizes
    all_max_cluster_sizes = nan(parameters.PermNumClusterwise,1); % reserve space.

    for f = 1 : parameters.PermNumVoxelwise % go through each frame of generated betas in the null data...
        svrlsm_waitbar(parameters.waitbar,f/parameters.PermNumVoxelwise);
        check_for_interrupt(parameters)

        frame_length = length(variables.m_idx);
        frame_start_index = 1+((f-1)*frame_length); % +1 since not zero indexing
        frame_end_index = (frame_start_index-1)+frame_length; % -1 so we are not 1 too long.
        relevant_data_frame = all_perm_data.Data(frame_start_index:frame_end_index); % extract the frame
        templatevol = zeros(variables.vo.dim(1:3)); % make a zeros template....        
        templatevol(variables.m_idx) = relevant_data_frame; % put the beta values back in indices.

        % if requested, write out raw voxel NON-thresholded images for this permutation.
        if parameters.SavePreThresholdedPermutations 
            save_pre_thresholded_permutation(variables,parameters,templatevol)
        end

        % Always do this step - apply the threshold to this current permutation.
        thresholded = do_tail_thresholding(parameters,thresholded,templatevol);

        % If requested, save raw voxel thresholded image for this permutation
        if parameters.SavePostVoxelwiseThresholdedPermutations 
            save_post_voxelwise_thresholded_permutation(parameters,variables,thresholded)
        end

        % retrieve and store largest cluster from this permutation (inside, the volume is saved if requested)
        all_max_cluster_sizes(f) = get_cur_largest_cluster_wise(parameters,handles.options,variables,thresholded);
    end
    
    svrlsm_waitbar(parameters.waitbar,0,''); % reset.

    %% Save the resulting cluster lists
    variables.files_created.largest_clusters = fullfile(variables.output_folder.clusterwise,'Largest null cluster list.mat');
    save(variables.files_created.largest_clusters,'all_max_cluster_sizes');