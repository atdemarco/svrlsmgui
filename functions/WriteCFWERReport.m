function [] = WriteCFWERReport(parms)
fprintf(parms.fileID,'<hr>');
        fprintf(parms.fileID,'<h2>Continuous FWE Threshold Report</h2>');
        cfwerdata = load(fullfile(parms.output_folders.cfwer,'cfwerinfo.mat'));

        % do we include "...which rounds to"?
        if cfwerdata.cfwerinfo.v_value_in_mm3 ~= cfwerdata.cfwerinfo.v_value_in_mm3_actual_floor
            roundsto = sprintf(', which rounds to %.1f mm&sup3; ',cfwerdata.cfwerinfo.v_value_in_mm3_actual_floor);
        else % don't tell the user anything special
            roundsto =' ';
        end

        fprintf(parms.fileID,'Continuous permutation-based family wise error (CFWE) correction was configured to permit %.1f mm&sup3; of false positives%s(desired v = %d whole voxels) and accept a family-wise error rate (FWER) of %.2f. With these criteria the brainwide single p-value cutoff was calculated to be %.5f<br><br>', ...
            cfwerdata.cfwerinfo.v_value_in_mm3, roundsto, cfwerdata.cfwerinfo.vox_limited_v_val_floor, cfwerdata.cfwerinfo.cfwer_p_value, cfwerdata.cfwerinfo.cfwer_single_pval_answer);

    % Empirical CDF of P(V_requested) and P(V_achieved)
    %   ecdf(cfwerdata.cfwerinfo.p_of_requested_v);
    %   hold on;
    %   ecdf(cfwerdata.cfwerinfo.pval_null_dist.pval);
    %   set(gca,'xlim',[0 .01])

    % Empirical CDF of suprathreshold under null at P(V_requested) vs P(V_achieved)
    %   ecdf(cfwerdata.cfwerinfo.n_suprathreshold_vox_dist);
    %   hold on;
    %   ecdf(cfwerdata.cfwerinfo.n_suprathreshold_vox_dist_unadjusted);
    %   set(gca,'ylim',[.9 1])

        %% Plot the null distribution probability density...
        [fdata,xi] = ksdensity(cfwerdata.cfwerinfo.pval_null_dist.pval,'kernel','epanechnikov','Support','positive','BoundaryCorrection','Reflection');
        f=figure('visible','off');
        a = axes(f);
        plot(xi,fdata,'k','parent',a);
        hold on;
        line(cfwerdata.cfwerinfo.cfwer_single_pval_answer*ones(1,2),get(a,'ylim'),'color','r','parent',a)

        ylabel('Density')
        xlabel('P-value')
        legend({'Null FWE distribution',sprintf('Whole-brain threshold (FWER = %.2f)',cfwerdata.cfwerinfo.cfwer_p_value)})
        title(sprintf('Null FWE P-distribution (v = %d mm^{3}, %d perms)',cfwerdata.cfwerinfo.v_value_in_mm3_actual_floor,parms.PermNumVoxelwise))

        % Label the result.
        txt = sprintf('FWER(%.2f,v=%d) = %.5f',cfwerdata.cfwerinfo.cfwer_p_value,cfwerdata.cfwerinfo.v_value_in_mm3_actual_floor,cfwerdata.cfwerinfo.cfwer_single_pval_answer);
        xlim = get(a,'xlim'); ylim = get(a,'ylim');
        text(min(xlim)+range(xlim)*.10,min(ylim)+range(ylim)*.10,txt,'Parent',a)

        figsnap = getframe(f); % capture whole figure.
        close(f); % close the fig
        fname = 'null_p_dist.png';
        imwrite(figsnap.cdata,fullfile(parms.picturedir,fname));
        imstr = 'Null p distribution in permutation data';
        imtxt = ['<img src="images/' fname '" alt="' imstr '">'];
        fprintf(parms.fileID,'%s<br><br>',imtxt);

        %% Plot the null distribution of suprathreshold voxels and how many WE have.
        [~,suprathreshold_pval_map]=read_nifti(parms.files_created.thresholded_pmap);
        n_suprathreshold_voxels = nnz(suprathreshold_pval_map);

        [fdata,xi]=  ksdensity(cfwerdata.cfwerinfo.n_suprathreshold_vox_dist);

        f=figure('visible','off');
        a = axes(f);
        plot(xi,fdata,'k','parent',a);
        hold on;
        line(n_suprathreshold_voxels*ones(1,2),get(a,'ylim'),'color','r','parent',a)
        ylabel('Density')
        xlabel('# Voxels')
        legend({'Null distribution','Real data'})
        title('Null distribution of # of suprathreshold voxels')
        set(a,'xlim',[0 max(get(a,'xlim'))])
        figsnap = getframe(f); % capture whole figure.
        close(f); % close the fig
        fname = 'null_suprathresh_vox_dist.png';
        imwrite(figsnap.cdata,fullfile(parms.picturedir,fname));
        imstr = 'Null suprathreshold voxel distribution in permutation data';
        imtxt = ['<img src="images/' fname '" alt="' imstr '">'];
        fprintf(parms.fileID,'%s<br><br>',imtxt);

        %% Describe and plot the achieved v vs requested v
        n_failed_to_get_requested_v = parms.PermNumVoxelwise - sum(cfwerdata.cfwerinfo.requested_v_index == cfwerdata.cfwerinfo.pval_null_dist.actual_v);
        txt = sprintf('The requested v value was %d, but in some cases multiple voxels equal the corresponding p-value, making them indistinguishable. In these cases, the next-most conservative p-value is selected. Thus, the achieved v value can differ from the requested v value. Of the %d null datasets generated by permutation, %d failed to achieve the requested v. Of the achieved v distribution, the mode was %d, the median was %d, and the mean was %.1f with a standard deviation of %.1f', ... 
            cfwerdata.cfwerinfo.requested_v_index,parms.PermNumVoxelwise, n_failed_to_get_requested_v, ...
            mode(cfwerdata.cfwerinfo.pval_null_dist.actual_v), median(cfwerdata.cfwerinfo.pval_null_dist.actual_v), ...
            mean(cfwerdata.cfwerinfo.pval_null_dist.actual_v), std(cfwerdata.cfwerinfo.pval_null_dist.actual_v));
        fprintf(parms.fileID,'%s<br><br>',txt);

        [height,xvals] = ksdensity(cfwerdata.cfwerinfo.pval_null_dist.actual_v,'kernel','epanechnikov','Support','positive','BoundaryCorrection','Reflection');
        f=figure('visible','off');
        a=axes(f);
        plot(xvals,height,'k-','Parent',a);
        hold on;
        plot(ones(1,2)*cfwerdata.cfwerinfo.requested_v_index,get(a,'ylim'),'r--')
        xlabel('Achieved v (voxels)')
        ylabel('Density')
        title(sprintf('Distribution of achieved v (%d null datasets)',parms.PermNumVoxelwise))
        legend({'V_{achieved}','V_{requested}'},'Location','Northwest')

        figsnap = getframe(f); % capture whole figure.
        fname = 'cfwer_achieved_v.png';
        imwrite(figsnap.cdata,fullfile(parms.picturedir,fname));
        close(f); % close the fig
        imstr = 'Achieved v values.';
        imtxt = ['<img src="images/' fname '" alt="' imstr '">'];
        fprintf(parms.fileID,'%s<br><br>',imtxt);

        %% Now the suprathreshold clusters under the null.
        %[height,xvals] = ksdensity(cfwerinfo.largest_cluster,'kernel','epanechnikov','Support','positive','BoundaryCorrection','Reflection');
        